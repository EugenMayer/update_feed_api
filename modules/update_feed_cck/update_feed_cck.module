<?php
// $Id$

// Copyright (c) 2010 KontextWork
// Author: Eugen Mayer

require_once 'update_feed_cck.field.inc';
require_once 'update_feed_cck.formatter.inc';
require_once 'update_feed_cck.widget.inc';

function update_feed_cck_menu() {
  $items = array();
  $items['update_feed_cck/autocomplete/modules'] = array(
    'title' => 'Update feed cck autocompletition',
		'page callback' => '_update_feed_cck_autocomplete_modules',
    'access arguments' => array('update feed cck autocompletition'), 
    'type' => MENU_CALLBACK
  );
   $items['update_feed_cck/autocomplete/releases/%'] = array(
    'title' => 'Update feed cck autocompletition',
    'page callback' => '_update_feed_cck_autocomplete_releases',
    'page arguments' => array(3,4),
    'access arguments' => array('update feed cck autocompletition'), 
    'type' => MENU_CALLBACK
  );
  return $items;
}

function update_feed_cck_perm() {
  return array('update feed cck autocompletition');
}

function _update_feed_cck_autocomplete_modules() {
  $server_key = $_GET['server_key'];
  $api_version = $_GET['api'];
  $keyword = $_GET['search'];
  
  $pl = new Project_list(array('server_key' => $server_key, 'api_version' => $api_version), 20);
  $pl->search($keyword);
  $result = $pl->to_array();
  autocomplete_element_output($result);
  exit();
}

function _update_feed_cck_autocomplete_releases($field_name, $delta) {
  $cck_field = $_POST[$field_name][$delta];
  $server_key = $cck_field['server_key'];
  $short_name = $cck_field['short_name'];
  $api_version = $cck_field['api_version'];
  if(!empty($server_key) && !empty($short_name) && !empty($api_version)) {
    $p = update_feed_api_get_project($server_key, $short_name, $api_version, TRUE);
  }
    
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
   // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);
  // Render the new output.
  $new_form = $form[$field_name][$delta]['release'];
  dsm($new_form);
  $output =  drupal_render($new_form);  
  print drupal_to_js(array('data' => $output, 'status' => true));
  exit();
}
  
/**
 * Implementation of hook_field_info().
 */
function update_feed_cck_field_info() {
  return array(
    'update_feed_cck' => array(
      'label' => t('Update feed'), 
      'description' => t('A field for a module fetched by the update_feed_api'),
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function update_feed_cck_widget_info() {
  return array(
    'update_feed_cck_widget' => array(
      'field types' => array('update_feed_cck'),
      'label' => t('Update feed select dialog'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
          'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of CCK's hook_field().
 */
function update_feed_cck_field($op, $node, $field, &$items, $teaser, $page) {
  module_load_include('inc', 'update_feed_cck', 'update_feed_cck.field');
  $op = str_replace(' ', '_', $op);
  // add filefield specific handlers...
  $function = 'update_feed_cck_field_'. $op;
  if (function_exists($function)) {
    return $function($node, $field, $items, $teaser, $page);
  }
}

/**
 *  Thats our own FAPI element for our CCK widget
 */

function update_feed_cck_theme() {
  return array(
    'update_feed_module' => array (
        'arguments' => array('element' => NULL),
    ),
    'update_feed_cck_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'file' => 'update_feed_cck.formatter.inc',
    ),
    'update_feed_cck_formatter_server_key' => array(
      'arguments' => array('element' => NULL),
      'file' => 'update_feed_cck.formatter.inc',
    ),
    'update_feed_cck_formatter_short_name' => array(
      'arguments' => array('element' => NULL),
      'file' => 'update_feed_cck.formatter.inc',
    ),
    'update_feed_cck_formatter_version' => array(
      'arguments' => array('file' => NULL, 'field' => NULL),
      'file' => 'update_feed_cck.formatter.inc',
    ),
    'update_feed_cck_formatter_api_version' => array(
      'arguments' => array('file' => NULL),
      'file' => 'update_feed_cck.formatter.inc',
    ),
  );
}


/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function update_feed_cck_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Table(all fields)'),
      'field types' => array('update_field_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Displays modules in a table with the shortname, server, api and version'),
    ),
    'api_versions' => array(
      'label' => t('API Versions'),
      'field types' => array('update_field_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Displays the api-versions of the module attached'),
    ),
    'server_key' => array(
      'label' => t('Server key'),
      'field types' => array('update_field_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Displays the server_key of the  module attached'),
    ),
    'short_name' => array(
      'label' => t('Short Name(Module name)'),
      'field types' => array('update_field_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Displays the short_name of the module attached'),
    ),
    'version' => array(
      'label' => t('Version'),
      'field types' => array('update_field_cck'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Displays the version of the module attached'),
    ),
  );
}


function update_feed_cck_elements() {
  return array(
  'update_feed_module' => array(
    '#input' => TRUE,
    '#delta' => 0,
    '#process' => array('update_feed_cck_update_feed_module_process'),
    '#autocomplete_path' => FALSE,
    ),
  );
}

function theme_update_feed_module($element) {
  return theme('form_element', $element, $element['#children']);
}
